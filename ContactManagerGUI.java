////////////////////////////////////////////////////////////////////////////////
//---------------------------ContactManagerGUI.java---------------------------//
//                                  v 1.0                                     //
//                                                                            //
// This program will provide a user interface for managing contacts of the    //
// user. All contacts are stored and retrieved from ContactList.txt file. The //
// user has been provided different buttons to perform various action like    //
// adding new contact or saving the data to a file.                           //
//                                                                            //
// Name: Nagabharan Nagendran                                                 //
// Net ID: nxn141730                                                          //
// Date created: 09.19.2014                                                   //
// Purpose: Assignment                                                        //
// Class: CS6301.022 User Interface Design                                    //
////////////////////////////////////////////////////////////////////////////////

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class ContactManagerGUI extends javax.swing.JFrame {

    /**
     * Creates new form ContactManagerGUI
     */
    public ContactManagerGUI() throws IOException {
        initComponents();
        loadTable();
        hs = DuplicateNameChecker.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GenderGroup = new javax.swing.ButtonGroup();
        WarningLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtabContacts = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        FemaleRadio = new javax.swing.JRadioButton();
        ZipCodeText = new javax.swing.JTextField();
        AddressLabel = new javax.swing.JLabel();
        CityText = new javax.swing.JTextField();
        FNameText = new javax.swing.JTextField();
        AddressText2 = new javax.swing.JTextField();
        StateLabel = new javax.swing.JLabel();
        AddressText1 = new javax.swing.JTextField();
        PhoneText = new javax.swing.JTextField();
        LNameLabel = new javax.swing.JLabel();
        MNameText = new javax.swing.JTextField();
        StateText = new javax.swing.JTextField();
        MaleRadio = new javax.swing.JRadioButton();
        LNameText = new javax.swing.JTextField();
        CityLabel = new javax.swing.JLabel();
        MNameLabel = new javax.swing.JLabel();
        ZipCodeLabel = new javax.swing.JLabel();
        FNameLabel = new javax.swing.JLabel();
        GenderLabel = new javax.swing.JLabel();
        PhoneLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        AddButton = new javax.swing.JButton();
        ClearButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Contact Manager");
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        WarningLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jtabContacts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "First Name", "Middle Name", "Last Name", "Address1", "Address2", "City", "State", "Zip Code", "Gender", "Phone Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtabContacts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtabContactsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtabContacts);
        if (jtabContacts.getColumnModel().getColumnCount() > 0) {
            jtabContacts.getColumnModel().getColumn(0).setResizable(false);
            jtabContacts.getColumnModel().getColumn(1).setMinWidth(0);
            jtabContacts.getColumnModel().getColumn(1).setPreferredWidth(0);
            jtabContacts.getColumnModel().getColumn(1).setMaxWidth(0);
            jtabContacts.getColumnModel().getColumn(2).setMinWidth(0);
            jtabContacts.getColumnModel().getColumn(2).setPreferredWidth(0);
            jtabContacts.getColumnModel().getColumn(2).setMaxWidth(0);
            jtabContacts.getColumnModel().getColumn(3).setMinWidth(0);
            jtabContacts.getColumnModel().getColumn(3).setPreferredWidth(0);
            jtabContacts.getColumnModel().getColumn(3).setMaxWidth(0);
            jtabContacts.getColumnModel().getColumn(4).setMinWidth(0);
            jtabContacts.getColumnModel().getColumn(4).setPreferredWidth(0);
            jtabContacts.getColumnModel().getColumn(4).setMaxWidth(0);
            jtabContacts.getColumnModel().getColumn(5).setMinWidth(0);
            jtabContacts.getColumnModel().getColumn(5).setPreferredWidth(0);
            jtabContacts.getColumnModel().getColumn(5).setMaxWidth(0);
            jtabContacts.getColumnModel().getColumn(6).setMinWidth(0);
            jtabContacts.getColumnModel().getColumn(6).setPreferredWidth(0);
            jtabContacts.getColumnModel().getColumn(6).setMaxWidth(0);
            jtabContacts.getColumnModel().getColumn(7).setMinWidth(0);
            jtabContacts.getColumnModel().getColumn(7).setPreferredWidth(0);
            jtabContacts.getColumnModel().getColumn(7).setMaxWidth(0);
            jtabContacts.getColumnModel().getColumn(8).setMinWidth(0);
            jtabContacts.getColumnModel().getColumn(8).setPreferredWidth(0);
            jtabContacts.getColumnModel().getColumn(8).setMaxWidth(0);
            jtabContacts.getColumnModel().getColumn(9).setResizable(false);
        }

        GenderGroup.add(FemaleRadio);
        FemaleRadio.setText("F");
        FemaleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FemaleRadioActionPerformed(evt);
            }
        });

        ZipCodeText.setToolTipText("Enter your 9 digit zipcode");

        AddressLabel.setDisplayedMnemonic('A');
        AddressLabel.setLabelFor(AddressText1);
        AddressLabel.setText("Address *:");

        CityText.setColumns(25);
        CityText.setDocument(new JTextFieldLimit(25));
        CityText.setToolTipText("Enter your City name");

        FNameText.setColumns(20);
        FNameText.setDocument(new JTextFieldLimit(20));
        FNameText.setToolTipText("Enter your First/Given Name");

        AddressText2.setColumns(35);
        AddressText2.setDocument(new JTextFieldLimit(35));

        StateLabel.setDisplayedMnemonic('S');
        StateLabel.setLabelFor(StateText);
        StateLabel.setText("State *:");

        AddressText1.setColumns(35);
        AddressText1.setDocument(new JTextFieldLimit(35));
        AddressText1.setToolTipText("Enter your address");

        PhoneText.setColumns(21);
        PhoneText.setDocument(new JTextFieldLimit(21));
        PhoneText.setToolTipText("Enter upto 21 digit phone number");

        LNameLabel.setDisplayedMnemonic('L');
        LNameLabel.setLabelFor(LNameText);
        LNameLabel.setText("Last Name *:");

        MNameText.setColumns(1);
        MNameText.setDocument(new JTextFieldLimit(1));
        MNameText.setToolTipText("Enter your Middle Name Initial");

        StateText.setColumns(2);
        StateText.setDocument(new JTextFieldLimit(2));
        StateText.setToolTipText("Enter your 2 letter State");
        StateText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                StateTextKeyTyped(evt);
            }
        });

        GenderGroup.add(MaleRadio);
        MaleRadio.setSelected(true);
        MaleRadio.setText("M");
        MaleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaleRadioActionPerformed(evt);
            }
        });

        LNameText.setColumns(20);
        LNameText.setDocument(new JTextFieldLimit(20));
        LNameText.setToolTipText("Enter your Last/Family Name");

        CityLabel.setDisplayedMnemonic('C');
        CityLabel.setLabelFor(CityText);
        CityLabel.setText("City *:");

        MNameLabel.setDisplayedMnemonic('M');
        MNameLabel.setLabelFor(MNameText);
        MNameLabel.setText("Middle Name");

        ZipCodeLabel.setDisplayedMnemonic('Z');
        ZipCodeLabel.setLabelFor(ZipCodeText);
        ZipCodeLabel.setText("Zip Code *:");

        FNameLabel.setDisplayedMnemonic('F');
        FNameLabel.setLabelFor(FNameText);
        FNameLabel.setText("First Name *:");

        GenderLabel.setText("Gender *:");

        PhoneLabel.setDisplayedMnemonic('P');
        PhoneLabel.setLabelFor(PhoneText);
        PhoneLabel.setText("Phone Number *:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(FNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(FNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(MNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(MNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(LNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddressLabel)
                            .addComponent(CityLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddressText2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(AddressText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(StateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ZipCodeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ZipCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PhoneLabel)
                            .addComponent(GenderLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(PhoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(MaleRadio)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(FemaleRadio)))))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddressLabel, CityLabel, FNameLabel, GenderLabel, LNameLabel, MNameLabel, PhoneLabel, StateLabel, ZipCodeLabel});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddressText1, AddressText2, CityText, FNameText, LNameText, MNameText, PhoneText, StateText, ZipCodeText});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {FemaleRadio, MaleRadio});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FNameLabel)
                    .addComponent(FNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(MNameLabel)
                    .addComponent(MNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LNameLabel)
                    .addComponent(LNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(AddressLabel)
                    .addComponent(AddressText1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(AddressText2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CityLabel)
                    .addComponent(CityText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StateLabel)
                    .addComponent(StateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ZipCodeLabel)
                    .addComponent(ZipCodeText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PhoneLabel)
                    .addComponent(PhoneText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(GenderLabel)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(MaleRadio)
                        .addComponent(FemaleRadio)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddressLabel, CityLabel, FNameLabel, GenderLabel, LNameLabel, MNameLabel, PhoneLabel, StateLabel, ZipCodeLabel});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddressText1, AddressText2, CityText, FNameText, LNameText, MNameText});

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        ClearButton.setText("Clear");
        ClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        SaveButton.setText("Save to File");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AddButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClearButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SaveButton)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {AddButton, ClearButton, DeleteButton, SaveButton});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(ClearButton)
                    .addComponent(DeleteButton)
                    .addComponent(SaveButton))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {AddButton, ClearButton, DeleteButton, SaveButton});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(WarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(WarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * This method is called to load the JTable with previously stored values.
     * The values are inserted into the table and are sorted according to the 
     * first column i.e. First Name. Values are automatically sorted on update.
     */
    
    private void loadTable() throws FileNotFoundException, IOException{
        FileInputStream fin =  new FileInputStream("ContactList.txt");
        DefaultTableModel model = (DefaultTableModel) jtabContacts.getModel();
        BufferedReader br = new BufferedReader(new InputStreamReader(fin));
        String line = null;
        while((line = br.readLine()) != null){  
            Object[] st = line.split(":");
            model.addRow(st);
        }
        br.close();
        
        TableRowSorter<TableModel> sorter = new TableRowSorter<>(model);
        jtabContacts.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        int columnIndexToSort = 0;
        sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
        sorter.sort();
        sorter.setSortsOnUpdates(true);
        
        warner("Old data loaded");
    }
    
    /**
     * This method is called to clear all the fields in the JForm and reset the
     * selections made.It is also used to restore the AddButton label to adding
     * new record from updating current record.
     */
    private void fieldClear(){
        update=0;
        FNameText.setText("");
        MNameText.setText("");
        LNameText.setText("");
        AddressText1.setText("");
        AddressText2.setText("");
        CityText.setText("");
        StateText.setText("");
        ZipCodeText.setText("");
        PhoneText.setText("");
        GenderGroup.clearSelection();
        jtabContacts.getSelectionModel().clearSelection();
        AddButton.setText("Add");
    }
   
    private void FemaleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FemaleRadioActionPerformed
        gender = "F";
    }//GEN-LAST:event_FemaleRadioActionPerformed

    /**
     * This method is called automatically when the AddButton is clicked on the
     * application. We check for consistency in data entered by the user. We check
     * if the wants to perform adding new record or updating previous record using
     * a boolean called update. Once the input is validated it is put inside the 
     * table for display.
     * update has the value 0 if user is in ADD mode and value 1 if user is in 
     * UPDATE mode.
     */
    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed

        if (FNameText.getText() == null || FNameText.getText().equals("") || !FNameText.getText().matches("[A-Z][a-zA-Z]*")) {
            warner("Please enter a valid first name");
            return;
        }

        if (LNameText.getText() == null || LNameText.getText().equals("") || !LNameText.getText().matches("[a-zA-z]+([ '-][a-zA-Z]+)*" )) {
            warner("Please enter a valid last name");
            return;
        }

        if (AddressText1.getText() == null || AddressText1.getText().equals("") || !AddressText1.getText().matches("\\d+\\s+([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+)" )) {
            warner("Please enter a valid address");
            return;
        }

        if (CityText.getText() == null || CityText.getText().equals("") || !CityText.getText().matches("([a-zA-Z]+|[a-zA-Z]+\\s[a-zA-Z]+)")) {
            warner("Please enter a valid city name");
            return;
        }

        if (StateText.getText() == null || StateText.getText().equals("") || !StateText.getText().matches("([a-zA-Z]{2})")) {
            warner("Please enter a valid state name");
            return;
        }

        if (ZipCodeText.getText() == null || ZipCodeText.getText().equals("") || !ZipCodeText.getText().matches("\\d+")) {
            warner("Please enter a valid zip code");
            return;
        }

        if (PhoneText.getText() == null || PhoneText.getText().equals("") || !PhoneText.getText().matches("\\d+")) {
            warner("Please enter a valid phone number");
            return;
        }

        if (gender == null || gender.equals("")) {
            warner("Please enter a valid gender");
            return;
        }

        Contact co = new Contact(FNameText.getText(),MNameText.getText(),LNameText.getText(),AddressText1.getText(),AddressText2.getText(),CityText.getText(),StateText.getText(),ZipCodeText.getText(),gender,PhoneText.getText());
        
        if(update == 0){
            String temp = co.getFName()+co.getMName()+co.getLName();
            if(hs.saveWord(temp)==0){
                DefaultTableModel model = (DefaultTableModel) jtabContacts.getModel();
                model.addRow(new Object[]{co.getFName(),co.getMName(),co.getLName(),co.getAdd1(),co.getAdd2(),co.getCity(),co.getState(),co.getZip(),co.getGender(),co.getPhone()});
                warner("Contact added");
            } else {
                warner("Contact exists");
            }
        } else {
            DefaultTableModel model = (DefaultTableModel) jtabContacts.getModel();
            if(jtabContacts.getSelectedRow()==-1){
                if(jtabContacts.getRowCount()==0){
                    warner("Table is empty");
                }
                else{
                    warner("You must select a contact");
                }
            } else {
                model.setValueAt(co.getFName(), jtabContacts.getSelectedRow(), 0);
                model.setValueAt(co.getMName(), jtabContacts.getSelectedRow(), 1);
                model.setValueAt(co.getLName(), jtabContacts.getSelectedRow(), 2);
                model.setValueAt(co.getAdd1(), jtabContacts.getSelectedRow(), 3);
                model.setValueAt(co.getAdd2(), jtabContacts.getSelectedRow(), 4);
                model.setValueAt(co.getCity(), jtabContacts.getSelectedRow(), 5);
                model.setValueAt(co.getState(), jtabContacts.getSelectedRow(), 6);
                model.setValueAt(co.getZip(), jtabContacts.getSelectedRow(), 7);
                model.setValueAt(co.getGender(), jtabContacts.getSelectedRow(), 8);
                model.setValueAt(co.getPhone(), jtabContacts.getSelectedRow(), 9);
                warner("Contact updated");
            }
            update=0;
            AddButton.setText("Add");
        }
        fieldClear();
    }//GEN-LAST:event_AddButtonActionPerformed

    private void MaleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaleRadioActionPerformed
        gender = "M";
    }//GEN-LAST:event_MaleRadioActionPerformed

    private void ClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearButtonActionPerformed
        fieldClear();
    }//GEN-LAST:event_ClearButtonActionPerformed

    /**
     * This method is called automatically when the DeleteButton is clicked on the
     * application. The user specifies the row to be deleted by clicking on it in
     * the table. The selected row is then deleted.
     * 
     */
    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        DefaultTableModel model = (DefaultTableModel) jtabContacts.getModel();
        if(jtabContacts.getSelectedRow()==-1){
            if(jtabContacts.getRowCount()==0){
                warner("Table is empty");
            }
            else{
                warner("You must select a contact");
            }
        } else {
            model.removeRow(jtabContacts.getSelectedRow());
            warner("Entry deleted");
            fieldClear();
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    /**
     * This method is called when the user selects a particular record in the 
     * table. The selected record is then displayed accordingly in the form fields.
     * The user has the option to edit those details and update the record.
     * 
     */
    private void jtabContactsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtabContactsMouseClicked
        
        AddButton.setText("Update");
        DefaultTableModel model = (DefaultTableModel) jtabContacts.getModel();
        FNameText.setText(model.getValueAt(jtabContacts.getSelectedRow(),0).toString());
        MNameText.setText(model.getValueAt(jtabContacts.getSelectedRow(),1).toString());
        LNameText.setText(model.getValueAt(jtabContacts.getSelectedRow(),2).toString());
        AddressText1.setText(model.getValueAt(jtabContacts.getSelectedRow(),3).toString());
        AddressText2.setText(model.getValueAt(jtabContacts.getSelectedRow(),4).toString());
        CityText.setText(model.getValueAt(jtabContacts.getSelectedRow(),5).toString());
        StateText.setText(model.getValueAt(jtabContacts.getSelectedRow(),6).toString());
        ZipCodeText.setText(model.getValueAt(jtabContacts.getSelectedRow(),7).toString());
        if("M".equals(model.getValueAt(jtabContacts.getSelectedRow(),8).toString())){
            MaleRadio.setSelected(true);
        } else {
                FemaleRadio.setSelected(true);
        }
        PhoneText.setText(model.getValueAt(jtabContacts.getSelectedRow(),9).toString());
        update=1;
        warner("Displaying selected record");
    }//GEN-LAST:event_jtabContactsMouseClicked

    /**
     * This method is called when the user wants to save the records to a file.
     * The values in the table are written into the flat file with colon(:) as
     * the separator between the columns.
     */
    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        BufferedWriter bfw;
        try {
            bfw = new BufferedWriter(new FileWriter("ContactList.txt"));
            for (int i = 0 ; i < jtabContacts.getRowCount(); i++) {
                for(int j = 0 ; j < jtabContacts.getColumnCount();j++) {
                    bfw.write((String)(jtabContacts.getValueAt(i,j)));
                    if(j!=jtabContacts.getColumnCount()-1)
                        bfw.write(":");
                }
                bfw.newLine();
            }
            bfw.close();
        } catch (IOException ex) {
            Logger.getLogger(ContactManagerGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        warner("File has been saved");
    }//GEN-LAST:event_SaveButtonActionPerformed

    /**
     * This method is called automatically when the user types a value in the 
     * state field. The character is converted to uppercase and displayed.
     * 
     */
    private void StateTextKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_StateTextKeyTyped
        char keyChar = evt.getKeyChar();
        if (Character.isLowerCase(keyChar)) {
            evt.setKeyChar(Character.toUpperCase(keyChar));
        }
    }//GEN-LAST:event_StateTextKeyTyped
    
    /**
     * This method is used for displaying the status of any operation. The message
     * is displayed for 1s using the timer and vanishes.
     */
    private void warner(String text){
        WarningLabel.setText(text);
            WarningLabel.setForeground(Color.RED);            
            ActionListener listener = new ActionListener(){
                public void actionPerformed(ActionEvent event){
                    WarningLabel.setText("");
                }
            };
            Timer timer = new Timer(1000, listener);
            timer.setRepeats(false);
            timer.start();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ContactManagerGUI().setVisible(true);
                    
                } catch (IOException ex) {
                    Logger.getLogger(ContactManagerGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JLabel AddressLabel;
    private javax.swing.JTextField AddressText1;
    private javax.swing.JTextField AddressText2;
    private javax.swing.JLabel CityLabel;
    private javax.swing.JTextField CityText;
    private javax.swing.JButton ClearButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JLabel FNameLabel;
    private javax.swing.JTextField FNameText;
    private javax.swing.JRadioButton FemaleRadio;
    private javax.swing.ButtonGroup GenderGroup;
    private javax.swing.JLabel GenderLabel;
    private javax.swing.JLabel LNameLabel;
    private javax.swing.JTextField LNameText;
    private javax.swing.JLabel MNameLabel;
    private javax.swing.JTextField MNameText;
    private javax.swing.JRadioButton MaleRadio;
    private javax.swing.JLabel PhoneLabel;
    private javax.swing.JTextField PhoneText;
    private javax.swing.JButton SaveButton;
    private javax.swing.JLabel StateLabel;
    private javax.swing.JTextField StateText;
    private javax.swing.JLabel WarningLabel;
    private javax.swing.JLabel ZipCodeLabel;
    private javax.swing.JTextField ZipCodeText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtabContacts;
    // End of variables declaration//GEN-END:variables
    // Custom variables defined
    private String gender;
    private int update=0;
    private DuplicateNameChecker hs;
    
}